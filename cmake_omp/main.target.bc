; ModuleID = '/tmp/main-bbff85.bc'
source_filename = "main.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ident_t = type { i32, i32, i32, i32, ptr }
%struct.__tgt_offload_entry = type { ptr, ptr, i64, i32, i32 }
%struct.__tgt_kernel_arguments = type { i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, [3 x i32], [3 x i32], i32 }

@0 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@1 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2050, i32 0, i32 22, ptr @0 }, align 8
@2 = private unnamed_addr constant %struct.ident_t { i32 0, i32 514, i32 0, i32 22, ptr @0 }, align 8
@3 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2, i32 0, i32 22, ptr @0 }, align 8
@.__omp_offloading_10305_4683c_main_l21.region_id = weak constant i8 0
@.offload_sizes = private unnamed_addr constant [3 x i64] [i64 128, i64 128, i64 128]
@.offload_maptypes = private unnamed_addr constant [3 x i64] [i64 34, i64 33, i64 33]
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.omp_offloading.entry_name = internal unnamed_addr constant [38 x i8] c"__omp_offloading_10305_4683c_main_l21\00"
@.omp_offloading.entry.__omp_offloading_10305_4683c_main_l21 = weak constant %struct.__tgt_offload_entry { ptr @.__omp_offloading_10305_4683c_main_l21.region_id, ptr @.omp_offloading.entry_name, i64 0, i32 0, i32 0 }, section "omp_offloading_entries", align 1
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 0, ptr @.omp_offloading.requires_reg, ptr null }]
@llvm.embedded.object = private constant [6456 x i8] c"\10\FF\10\AD\01\00\00\008\19\00\00\00\00\00\00 \00\00\00\00\00\00\00(\00\00\00\00\00\00\00\02\00\01\00\00\00\00\00H\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\98\00\00\00\00\00\00\00\9C\18\00\00\00\00\00\00i\00\00\00\00\00\00\00\89\00\00\00\00\00\00\00\82\00\00\00\00\00\00\00n\00\00\00\00\00\00\00\00arch\00riscv64-unknown-elf\00triple\00rv64imafd\00\00\00\00\00\00BC\C0\DE5\14\00\00\05\00\00\00b\0C0$JY\BEf\CD\FB\B5\BF\0BQ\80L\01\00\00\00!\0C\00\003\05\00\00\0B\02!\00\02\00\00\00\17\00\00\00\07\81#\91A\C8\04I\06\1029\92\01\84\0C%\05\08\19\1E\04\8Bb\80\14E\02B\92\0BB\A4\102\148\08\18K\0A2R\88Hp\C4!#D\12\87\8C\10A\92\02d\C8\08\B1\14 CF\88 \C9\012R\84X\0E\90\91\22D\90\A1\82\A2\02\19\C3\07\CB\15\09R\8C\0C\89 \00\00 \00\00\00\22f\04\10\B2B\82I\11RB\82I\91q\C2PH\0A\09&E\C6\05BR&\08&\9A#@\F2\22\CC\11\80\C19\D2\14Q\C2\E4#\03\D1L\FF\84\8A1\C6\00i\12\E6\08@\E14i\8A(a\F2\FF\7F2\A6\DF)\8A\C5\01\86\9Fh\A6\08C\05\00f\8C\11\80R \00\00(\06\02\00\00P\14\04\C6\00\00\801\0A\82\000\06\00P\06\04F%\10\18` `\8E \98\02H\90\01\00Q\18\00\00\0B\02\00\00\1Bv4\08\FE\FF\FF\FF\7F\00\D6\00p\008\00$\A0\0C\08s\90\87ph\87rh\03xx\87tp\07z(\07y\00\C2\81\1D\D8\01 \DC\E1\1D\DA\80\1E\E4!\1C\E0\01\1E\D2\C1\1D\CE\A1\0D\DA!\1C\E8\01\1D\00z\90\87z(\07\80\98\07z\08\87qX\876\80\07yx\07z(\87q\A0\87w\90\876\10\87z0\07s(\07yh\83yH\07}(\07\00\0F\00\82\1E\C2A\1E\CE\A1\1C\E8\A1\0D\C6\01\1E\EA\018\87rp\87r\90\87t\18\876\90\07{\B0\03:\00\08z\08\07y8\87r\A0\8760\87r\08\07z\A8\07y(\87y\00\D6\C0\0E\E8@\1C\D2\81\1E\D8`\0D\C2\81\0D\D6\80\1C\D8`\0D\CC\81\0D\D6\A0\1D\D8`\0D\E4\A1\1C\D8!\1C\F0\81\0D\D6@\1F\D2a\1C\E6A\1E\D8\A0\0D\C6\81\0D\DA\A0\1C\D8\A0\0D\CA\01\1F\E0\A1\1C\E4!\1D\DA\A1\1C\DC\81\1E\C2\81\1D\DA@\1F\C2a\1C\C2a\1E\D8\A0\0D\CA\01\1F\E0\A1\1C\E4!\1D\DA\A1\1C\DC\81\1E\C2\81\1D\DA@\1F\C6\A1\1D\DE\01\1E\D8\A0\0D\CA\01\1F\E0\A1\1C\E4!\1D\DA\A1\1C\DC\81\1E\C2\81\1D\DA@\1F\CCA\1C\CC\A1\1D\D2\C1\1D\D8\A0\0D\CA\01\1F\E0\A1\1C\E4!\1D\DA\A1\1C\DC\81\1E\C2\81\1D\DA@\1F\D2a\1C\CC!\1D\D8\01\1E\D8\A0\0D\CA\01\1F\E0\A1\1C\E4!\1D\DA\A1\1C\DC\81\1E\C2\81\1D\DA@\1F\D2a\1C\CC!\1D\E6a\1E\D8\A0\0D\CA\01\1F\E0\A1\1C\E4!\1D\DA\A1\1C\DC\81\1E\C2\81\1D\DA@\1F\D2\A1\1D\DE\01\1E\D8\A0\0D\CA\01\1F\E0\A1\1C\E4!\1D\DA\A1\1C\DC\81\1E\C2\81\1D\DA@\1F\E8a\1E\DE\81\0D\DA\A0\1C\F0\01\1E\CAA\1E\D2\A1\1D\CA\C1\1D\E8!\1C\D8\A1\0D\F4\C1\1E\CCA\1C\CC\A1\1D\D2\C1\1D\D8\A0\0D\CA\01\1F\E0\A1\1C\E4!\1D\DA\A1\1C\DC\81\1E\C2\81\1D\DA@\1F\EC\C1\1C\C4\C1\1C\EE\A1\1D\C2\81\0D\DA\00\1D\D8\A0\0D\E6\A1\1D\C2!\1D\C2\81\0D\DA`\1E\DA\A1\1C\E0\A1\1D\E0\81\0D\DA`\1E\E6!\1C\D2!\1C\D8\A0\0D\E6\C1\1E\D2\C1\1D\EC!\1C\D8\81\0D\DA`\1E\EC\C1\1D\C2\01\1E\DE\81\1E\D8\A0\0D\E6\C1\1E\E0A\1C\DA\81\1E\D8\A0\0D\EC\81\0D\DA\00\1F\C6\C1\1E\C2\81\1D\EA\81\0D\DA\00\1F\C6\C1\1E\C4!\1D\D8\A0\0D\F0a\1C\ECA\1C\D2\81\1E\DA!\1C\DC!\1D\E0\81\0D\DA\00\1F\C6\C1\1E\CA\81\1D\EE\81\0D\DA\00\1F\C6\C1\1E\DA!\1C\C6\81\0D\DA\00\1F\C6\C1\1E\DA\A1\1C\DA\81\0D\DA\00\1F\C6\C1\1E\E6!\1D\DA\81\1C\D8\A0\0D\F0a\1E\CC\C1\1E\C6\01\1E\D8\A0\0D\F0a\1E\CC\C1\1E\CC\C1\1D\E4a\1C\D8!\1D\E0\01\1F\CC!\1E\CC\81\0D\DA\00\1F\E6\C1\1C\EC\C1\1C\EE\A1\1D\C2a\1C\C6!\1E\E2!\1E\D8\A0\0D\F0a\1E\CC\C1\1E\E2\A1\1D\C2a\1C\C6\81\1C\DE\81\1C\D8\A0\0D\F0a\1E\CC\C1\1E\E2\A1\1D\C2a\1C\C6!\1E\DE!\1E\D8\A0\0D\F0\81\1E\D0\A1\1C\C2\81\1C\C4!\1C\D8\A0\0D\F0\81\1E\D0\A1\1C\C2\81\1C\C4A\1C\D8\A0\0D\F0\81\1E\D0\A1\1C\C2\81\1C\C4a\1E\D8\A0\0D\F0\81\1E\D0\A1\1C\C2\81\1C\C6\A1\1D\DE\81\0D\DA\00\1F\E8\01\1D\CA!\1C\C8a\1C\DE\C1\1D\C8\A1\1D\DE\C1\1E\D8\A0\0D\F0\81\1E\D0\A1\1C\C2\81\1C\CC\A1\1D\CA\A1\1D\D2\81\1C\F0\81\0D\DA\00\1F\E8\01\1D\CA!\1C\C8\A1\1D\C2a\1C\D8\A0\0D\F0\81\1E\D0\A1\1C\C2\81\1C\DA\A1\1C\DA!\1D\C8\01\1F\D8\A0\0D\F0\81\1E\D0\A1\1C\C2\81\1C\DA\A1\1C\DA\01\1E\C2!\1D\E4\81\0D\DA\00\1F\E8\01\1D\CA!\1C\C8a\1E\F2\C1\1D\C6\81\0D\DA\00\1F\E8\01\1D\CA!\1C\C8\C1\1E\C8\E1\1D\E8\81\0D\DA\00\1F\EC\A1\1C\DC\81\1E\C2\C1\1D\C2a\1C\DE\C1\1D\C8\E1\1D\E0a\1E\D8\A0\0D\F4!\1C\E2@\0E\F0@\1E\E6\81\0D\DA@\1F\C2\C1\0E\E8@\1E\E6\81\0D\DA@\1F\C2\E1\1E\E4a\1E\D8\A0\0D\F4A\1C\C2\81\0D\DA@\1F\C4A\1C\D8\A0\0D\F4A\1C\C6\81\0D\DA@\1F\C4a\1D\C4\81\0D\DA@\1F\C4a\1D\C6\81\0D\DA@\1F\C4a\1D\F0\81\0D\DA@\1F\C4a\1E\D8\A0\0D\F4a\1C\C2\81\0D\DA@\1F\C6A\1C\D8\A0\0D\F4a\1C\C8\81\0D\DA@\1F\C6\A1\1C\D8\A0\0D\F4a\1C\CC\81\0D\DA@\1F\C6\A1\1D\E0\81\0D\DA@\1F\C6\A1\1D\E8\81\0D\DA@\1F\C8!\1D\DC\01\1F\D8\A0\0D\F4\C1\1C\C2\81\0D\DA@\1F\CC\01\1D\D8\A0\0D\F4\C1\1C\D0\A1\1D\D2\C1\1D\D8\A0\0D\F4\C1\1C\D2\C1\1D\F0\81\0D\DA@\1F\D0!\1D\DC\01\1F\D8\A0\0D\F4\01\1D\D2\C1\1D\F0\A1\1D\D2\C1\1D\D8\A0\0D\F4!\1D\C6\C1\0E\E8@\1C\D8\A0\0D\F4!\1D\C6A\1C\DE\A1\1D\D8\A0\0D\F4!\1D\C6A\1C\DE\01\1E\D8\A0\0D\F4!\1D\C6A\1C\DEA\1F\D8\A0\0D\F4!\1D\C6a\1C\C2\A1\1D\DE!\1C\D8\A0\0D\F4!\1D\C6a\1C\D2\C1\1C\D8\A0\0D\F4!\1D\C6a\1C\D8a\1E\DA\81\0D\DA@\1F\D2a\1C\C6A\1E\E6\A1\1C\D8\A0\0D\F4!\1D\C6\C1\1D\E8A\1E\D8\A0\0D\F4!\1D\C6\E1\1D\DC\81\1C\D8\A0\0D\F4!\1D\CC\A1\1C\DCa\1C\CA!\1D\D8\A0\0D\F4!\1D\D0!\1D\DC\81\1E\DC\81\1E\D8\81\0D\DA@\1F\D2\01\1D\D2\C1\1D\E8\01\1E\C2\A1\1E\E6\A1\1C\D8\A0\0D\F4!\1D\D0\01\1E\DA\81\0D\DA@\1F\D6\81\0D\DA@\1F\D6\C1\1D\D8\A0\0D\F4a\1D\DC\81\1C\D8\A0\0D\F4a\1D\DC\A1\1C\D8\A0\0D\F4a\1D\DC\01\1D\D8\A0\0D\F4a\1D\E4\81\0D\DA@\1F\D6a\1E\D8\A0\0D\F4a\1D\E6\A1\1C\C8\81\0D\DA@\1F\D6a\1E\D0\81\0D\DA@\1F\D6\81\1E\D8\A0\0D\F4\A1\1D\DA\A1\1E\D8\81\0D\DA@\1F\ECA\1C\C4\81\0D\DA@\1F\ECA\1C\C6\81\0D\DA@\1F\EC\A1\1C\E6@\0E\CC\81\0D\DA@\1F\EC\A1\1C\E6@\0E\F0\81\0D\DA@\1F\EC\A1\1C\EC\80\0E\C8\81\0D\DA@\1F\EC\A1\1C\EC\80\0E\CC\81\0D\DA@\1F\EC\A1\1C\EC\80\0E\F0\81\0D\DA@\1F\EC\C1\1C\D0\81\0D\DA@\1F\EC\C1\1C\D0\A1\1D\D2\C1\1D\D8\A0\0D\F4\C1\1E\D6A\1C\D8\A0\0D\F4\C1\1E\D6\E1\1C\D8\A0\0D\F4\C1\1E\D6\C1\1D\D8\A0\0D\F4\C1\1E\D6\C1\1D\C6\81\0D\DA@\1F\ECa\1D\DC\A1\1C\C8\81\0D\DA@\1F\ECa\1D\DC\E1\1C\D8\A0\0D\F4\C1\1E\D6\C1\1D\D0!\1C\D8\A0\0D\F4\C1\1E\D6\C1\1D\D0A\1C\D8\A0\0D\F4\C1\1E\D6a\1E\D8\A0\0D\F4\C1\1E\D6a\1E\C6\81\0D\DA@\1F\ECa\1D\E6\A1\1C\C8\81\0D\DA@\1F\ECa\1D\E6\E1\1C\D8\A0\0D\F4\C1\1E\D6a\1E\D0\81\0D\DA@\1F\ECa\1D\E8\81\0D\DA@\1F\EC\81\1D\E2\00\0E\E4\80\0E\C4\81\0D\DA@\1F\EC\81\1D\E2@\0E\F0@\1C\D8\A0\0D\F4\C1\1E\D8!\0E\EC`\0E\F0\80\0E\C4\81\0D\DA@\1F\EC\81\1D\E4\00\0E\E8\00\0F\C4\81\0D\DA@\1F\EC\81\1D\E4\A0\0E\EC@\1C\D8\A0\0D\F4\C1\1E\D8a\0E\E4\E0\0E\EC\00\0F\C4\81\0D\DA@\1F\EC\81\1D\E6@\0E\C4\81\0D\DA@\1F\EC\81\1D\E8\00\0E\F2\C0\0E\C4\81\0D\DA@\1F\EC\81\1D\EA \0E\E4@\1C\D8\A0\0D\F4\C1\1E\D8\C1\0E\E8@\1C\D8\A0\0D\F4\C1\1E\D8\C1\0E\EA\A0\0E\E6\C0\0E\C4\81\0D\DA@\1F\EC\81\1D\F0 \0E\F2@\0E\C4\01\D8`\08\01\90\00\A4\B0\81\19\04\80\14\803\08\02\22H\03\90\D8\C0\10\03@\0A\C0\19\04\01\11\A4\01Hl`\0A\02 \05\E0\0C\82\80\08\D2\00$6\18\86\00$\00)l`\8E\02 \05\E0\0C\82\80\08\D2\00$6\10\C8\FF\FF\FF\FF\0F\80\B4\81H\04\00\DB@(\03\80m \16\04\C06\10L\02`\1B\88f\00Ha\03\E1\10\00)l`\1E\03 \05\E0\0C\82\80\08\D2\00$60\D0\01\90\02p\06A@\04i\00\12\00\00\00\00I\18\00\00\08\00\00\00\13\8A@\18\88b\82\11\08\06Q\1C\13\0A$Q\16f\02\12\08F\E3\1C\0F4A@\12\00\00\00\136yH\87y\18\07{\B0\03:h\83zp\87up\87w\B8\07wh\83zp\87up\87w\B8\07wh\83r`\07s\D8\90\06\E5\D0\06\ED\A0\07\E5\D0\06\F0\A0\07v@\07z`\07t\D0\06\E9`\07t\A0\07v@\07m\90\0Eq \07x\A0\07q \07x\D0\06\EE0\07r\A0\07v@\07m0\0Bq \07x\B0\C2z\87v\80\87_x\07s0\07vx\87p \87tp\87s\F8\85rp\07z\90\87t(\87yPz@\88\90\0C2d\A4\C8\90\A0\11\C2\B0\08\03 \8D/<\CF\0E\0A\00\84\C1I\02\00\00\02\00\00\80\00\00\00`\07\05\00\C4 %\04\00\00\01\00\00@\00\00\00\B0\83\02\00b\A0\12\02\00\80\00\00\00 \00\00\00\D8A\01\001X\09\01\00@\00\00\00\10\00\00\00\EC\A0\00\AD\18\AE\01\00\00 \00\00\00\08\00\00\00\A8\B1\F3!\839\A4\AA\852H\00 \0A\00@\00\00\00\00\00 \00\00`H\A5\0Fr\A0\00\C0 \00\00\00\00\00\00\00@\00\00\C0\90\8A-\B0\05\08\80\01\00\00\00\00\00\00\00\00\00\00\86T\A4\F1\07\0C\00\0C\04\00\00\00\00\00\00\00\04\00\00\0C\A9F\C4j\80\00(\00\00\00\00\00\00\00\00\00\00`H\95#\90\03\04@\01\00\00\00\00\00\00\00\00\00\00C\AA4\89\1C \00\0A\00\00\00\00\00\00\00\00\00\00\90\D8 P\D8\A6\00\00 \0B\04\00\00\22\00\00\002\1E\98\18\19\11L\90\8C\09&G\C6\04C\12j\ED\EA\EE\B5\FB}w\EF\EA\EE\B5\FB}w\EF`;\D8nGc\04\A0\08A\8A\85\08\16\CE\E3@\00\8D\22D \82\85#9\10@\A3\08\88`\E1P\0E\04P\D92\F8\7F\87y~\A7(\16\07\18\90\C6\F8k\FA\A6\F3\1F\D7\F9[\F8\19\00i\FE\C5\AE\C9\8C\00\D0\C1\C2 .\C7\A1Q\8A\8C\08\85\0F:R*%P\08\C5P\0EeV\10d\8A\A0\06\08\D6\00\00\00\B1\18\00\00\C1\00\00\003\08\80\1C\C4\E1\1Cf\14\01=\88C8\84\C3\8CB\80\07yx\07s\98q\0C\E6\00\0F\ED\10\0E\F4\80\0E3\0CB\1E\C2\C1\1D\CE\A1\1Cf0\05=\88C8\84\83\1B\CC\03=\C8C=\8C\03=\CCx\8Ctp\07{\08\07yH\87pp\07zp\03vx\87p \87\19\CC\11\0E\EC\90\0E\E10\0Fn0\0F\E3\F0\0E\F0P\0E3\10\C4\1D\DE!\1C\D8!\1D\C2a\1Ef0\89;\BC\83;\D0C9\B4\03<\BC\83<\84\03;\CC\F0\14v`\07{h\077h\87rh\077\80\87p\90\87p`\07v(\07v\F8\05vx\87w\80\87_\08\87q\18\87r\98\87y\98\81,\EE\F0\0E\EE\E0\0E\F5\C0\0E\EC0\03b\C8\A1\1C\E4\A1\1C\CC\A1\1C\E4\A1\1C\DCa\1C\CA!\1C\C4\81\1D\CAa\06\D6\90C9\C8C9\98C9\C8C9\B8\C38\94C8\88\03;\94\C3/\BC\83<\FC\82;\D4\03;\B0\C3\0C\C7i\87pX\87rp\83th\07x`\87t\18\87t\A0\87\19\CES\0F\EE\00\0F\F2P\0E\E4\90\0E\E3@\0F\E1 \0E\ECP\0E3 (\1D\DC\C1\1E\C2A\1E\D2!\1C\DC\81\1E\DC\E0\1C\E4\E1\1D\EA\01\1Ef\18Q8\B0C:\9C\83;\CCP$v`\07{h\077`\87wx\07x\98QL\F4\90\0F\F0P\0E3\1Ej\1E\CAa\1C\E8!\1D\DE\C1\1D~\01\1E\E4\A1\1C\CC!\1D\F0a\06T\85\838\CC\C3;\B0C=\D0C9\FC\C2<\E4C;\88\C3;\B0\C3\8C\C5\0A\87y\98\87w\18\87t\08\07z(\07r\98\81\\\E3\10\0E\EC\C0\0E\E5P\0E\F30#\C1\D2A\1E\E4\E1\17\D8\E1\1D\DE\01\1EfH\19;\B0\83=\B4\83\1B\84\C38\8CC9\CC\C3<\B8\C19\C8\C3;\D4\03<\CCH\B4q\08\07v`\07q\08\87qX\87\19\DB\C6\0E\EC`\0F\ED\E0\06\F0 \0F\E50\0F\E5 \0F\F6P\0En\10\0E\E30\0E\E50\0F\F3\E0\06\E9\E0\0E\E4P\0E\F80#\E2\ECa\1C\C2\81\1D\D8\E1\17\EC!\1D\E6!\1D\C4!\1D\D8!\1D\E8!\1Ff \9D;\BCC=\B8\039\94\839\CCX\BCpp\07wx\07z\08\07zH\87wp\87\19\CB\E7\0E\EF0\0F\E1\E0\0E\E9@\0F\E9\A0\0F\E50\C3\01\03s\A8\07w\18\87_\98\87pp\87t\A0\87t\D0\87r\98\81\84A9\E0\C38\B0C=\90C9\CC@\C4\A0\1D\CA\A1\1D\E0A\1E\DE\C1\1Cf$c0\0E\E1\C0\0E\EC0\0F\E9@\0F\E50C!\83u\18\07sH\87_\A0\87|\80\87r\98\B1\94\01<\8C\C3<\94\C38\D0C:\BC\83;\CC\C3\8C\C5\0CH!\15Ba\1E\E6!\1D\CE\C1\1DR\81\14fLg0\0E\EF \0F\EF\E0\06\EFP\0F\F40\0F\E9@\0E\E5\E0\06\E6 \0F\E1\D0\0E\E5\00\00\00y \00\00z\00\00\00r\1EH C\88\0C\19\09r2H #\81\8C\91\91\D1D\A0\10(d<12B\8E\90!\A3\B80\E3\01\84\A2\14I\19\18M\E3\F8\02\00\00mainwchar_sizetarget-abilp64driscv-isarv64i2p1_m2p0_a2p1_f2p2_d2p2_zicsr2p0openmpopenmp-deviceframe-pointerSmallDataLimitclang version 18.1.7 (git@github.com:mooxiu/llvm.git 3fcb21a600ba8b0b603c93b90db978640c052323)\00\E63\00\00\00\00\00\000\8208#\08C6\820h#\08\C36\820p#\08C7\820x#\08\C37\820\80\C1\08\C2@\8D \0Ca0\82`\88\C1\08\821\06#\08\10\19\CCp0\8D\13<\0C3\C3\00\09\D1\0C\034\103\04\C6\0C\83Tt3\0C\D3A\CD0L\085\C30%\D5\0C\83\A5X3\04\CB\0C\C4\85a\D9\0C\01\19\9C\06p\1C\C7q\1C\C7\89\01'\06b \06b\A0\07b \06\96\18\88\81\18\88\81\18Xh #\81\09J\E8\AD\0D\EE\EB\CD\CC\8C\ED-\8C\CC%\CD\CD\ECm\94 \CB\88\8D\CD\AE\CD\A5\ED\8D\AC\8E\AD\CC\C5\8C-\ECln\94C\DB:\EF\03\830H\85\8D\CD\AE\CD%\8D\AC\CC\8Dn\94@\0C\86\0C\86E#\83!\83\81\D1\C8\00\00\00\00\A9\18\00\00-\00\00\00\0B\0Ar(\87w\80\07zXp\98C=\B8\C38\B0C9\D0\C3\82\E6\1C\C6\A1\0D\E8A\1E\C2\C1\1D\E6!\1D\E8!\1D\DE\C1\1D\164\E3`\0E\E7P\0F\E1 \0F\E4@\0F\E1 \0F\E7P\0E\F4\B0\80\81\07y(\87p`\07vx\87q\08\07z(\07rXp\9C\C38\B4\01;\A4\83=\94\C3\02k\1C\D8!\1C\DC\E1\1C\DC \1C\E4a\1C\DC \1C\E8\81\1E\C2a\1C\D0\A1\1C\C8a\1C\C2\81\1D\D8a\C1\01\0F\F4 \0F\E1P\0F\F4\80\0E\0B\88u\18\07sH\87\05\CF8\BC\83;\D8C9\C8\C39\94\83;\8CC9\8C\03=\C8\03;\00\00\00\00\D1\10\00\00\06\00\00\00\07\CC<\A4\83;\9C\03;\94\03=\A0\83<\94C8\90\C3\01\00\00\00a \00\00\16\00\00\00\13\04A,\10\00\00\00\01\00\00\004\CA\00\003\11\C0\C0\91\C2L\040p\A40\13\01\0C\1C)\CCD\00\03G\0A\C3\06\04\91\10\C0\B0\011 \040l@\08\07\01\0C\1B\10\81A\004\00B\03 4\002b\A0\00 \08\06N\19\B8\01\A2\06\83\10,\00\00\00a \00\00N\00\00\00\13\04I,\10\00\00\00\02\00\00\004\CA\A7p\03J\01\003\11\C0\C0\91\C2L\040p\A40\13\01\0C\1C)\CCD\00\03G\0A3\11\C0\C0\91\C2L\C40p\A30\131\0C\DC(\CCD\0C\037\0A3\11\C3\C0\8D\C2L\C40p\A30\131\0C\DC(\CCD\0C\037\0A\C3\06\04C\11\C0\B0\01\B1L\040l@(\12\01\0C\1B\10ID\00\C3\06\04\02\11\00)\80\90\02\08)\80\0C\1B\10\88\1B\0C\C0\B0\01qH\030l@\18`0\00\C3\06D\E1\06\03@\0F \14\8C1b\D0\00 \08\06\8B\1D\F4A0\1DJ\82\88\81\18P2\C6pCP\99\C1,C \04\B3\04\03-c\CC\12\0C\03\15\83\1B\04\820l@4\C1\00\903\C6\B0\01\11\05\030K@P4\06=c\0C7\08A\1A\CC2\14G@\D2\18\19\98\A0i\8C\0CL\8C\180\00\08\82\81\F3\07\A7\E0\85\C2\10D\D03K`\106\06Uc\A0\10\80\C0\B0\01\B1\05\030K@\CC\12 #\06\06\00\82`\D0\8C\02+@\1B\12\03\00\00\00\02\00\00\00\0B\86\00\18\00\00\00\00\00\00\00\00a \00\00s\00\00\00\13\04J,\10\00\00\00\02\00\00\004\CA\A7\88\00\00\00\003\11\C0\C0\91\C2L\040p\A40\13a\0C\1C)\CCD\18\03G\0A3\11\C0\C0\91\C2L\040p\A40\13\01\0C\1C)\CCD\0C\037\0A3\11\C3\C0\8D\C2L\C40p\A30\131\0C\DC(\CCD\0C\037\0A3\11\C3\C0\8D\C2L\C40p\A30l@8\17\01\0C\1B\10\8DE\00\C3\06\04S\11\C0\B0\01\B1P\040l@(\13\01\0C\1B\10\89D\00\C3\06\04\12\11\00)\80\90\02\08)\80\0C\1B\10H\1C\0C\C0\B0\01qL\03@\8F!\19\0C \C8\90\0C\06\0C\1B\10\CC0\00\C3\06\C4\12\0C\C0\B0\01\A1\9C\C1\00\0C\1B\10I\1D\0C\00U\80P0\C6\88A\03\80 \18,}0\0A\01\B68\0D\93\06i@\CD\18\C3\0D\81f\06\B3\0C\81\10\CC\12\0C\F4\8C1K0\0CT\0Cx\10\08\C2\B0\01\11\05\03@\D2\18\C3\06D\15\0C\C0,\01A\D5\184\8D1\DC \04i0\CBP \01ac` \07\22\80\A1\10\80\C0\B0\01Q\05\03@\D5\18\19\18\F1r\A8\F6 \A0`\0C\CA\C6\C8\C0\88\97\03\F6\07\01\05c`\11\80\00ycd`\C4\CB\E1#\85`\D8\80\08\88\01\98%0f\09\0E:\8310\08\05\10\186 \D2 \18\80Y\02b\96 \1910\00\10\04\83\86\16zA\DB\90\18\00\00\13\00\00\00\0B\86\00P\16\10\01 \04\0B\8A@\18\80k\01!\04\00\B0\80\10\02\00Z\E0\10\07\B20\89R\18\C2\00\04\CE\823\00\02a0\88\E2@\12ea\1A\E7\81\22i\A2\AE\CA\C22m\E3:\EF\03\830\10\831 \832\E0\00\00\00\00\00\00\00q \00\00\04\00\00\002\0E\10\22\84\06\D9\08x\10\8F\80\09\C1\09\00\00\00\00\00e\0C\00\00m\00\00\00\12\03\94h\03\00\00\00\03\00\00\00:\01\00\00/\00\00\00L\00\00\00\01\00\00\00X\00\00\00\00\00\00\00X\00\00\00\0D\00\00\00\90\01\00\00\01\00\00\00i\01\00\00\1B\00\00\00\84\01\00\00\08\00\00\00\00\00\00\00\00\00\00\00\A8\01\00\00\00\00\00\00\00\00\00\00\0D\00\00\00\00\00\00\00U\00\00\00%\00\00\00U\00\00\00%\00\00\00\FF\FF\FF\FF\12$\00\00z\00\00\002\00\00\00zy\00\00\00\12\03\94\B6\03\00\00\00.omp_offloading.entry_name.omp_offloading.entry.__omp_offloading_10305_4683c_main_l21__omp_offloading_10305_4683c_main_l21__omp_offloading_10305_4683c_main_l21.omp_outlined__kmpc_for_static_init_4__omp_offloading_10305_4683c_main_l21.omp_outlined.omp_outlined__kmpc_for_static_fini__kmpc_fork_call__kmpc_fork_teams18.1.7 3fcb21a600ba8b0b603c93b90db978640c052323riscv64-unknown-unknown-elfmain.cpp.L__unnamed_1.L__unnamed_2.L__unnamed_3.L__unnamed_4omp_offloading_entries\00\00\00\00\00\00\00\00\00\00", section ".llvm.offloading", align 8, !exclude !0
@llvm.compiler.used = appending global [1 x ptr] [ptr @llvm.embedded.object], section "llvm.metadata"

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [32 x i32], align 16
  %4 = alloca [32 x i32], align 16
  %5 = alloca [32 x i32], align 16
  %6 = alloca [3 x ptr], align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.__tgt_kernel_arguments, align 8
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  br label %11

11:                                               ; preds = %24, %0
  %12 = load i32, ptr %2, align 4
  %13 = icmp slt i32 %12, 32
  br i1 %13, label %14, label %27

14:                                               ; preds = %11
  %15 = load i32, ptr %2, align 4
  %16 = load i32, ptr %2, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [32 x i32], ptr %3, i64 0, i64 %17
  store i32 %15, ptr %18, align 4
  %19 = load i32, ptr %2, align 4
  %20 = mul nsw i32 2, %19
  %21 = load i32, ptr %2, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [32 x i32], ptr %4, i64 0, i64 %22
  store i32 %20, ptr %23, align 4
  br label %24

24:                                               ; preds = %14
  %25 = load i32, ptr %2, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, ptr %2, align 4
  br label %11, !llvm.loop !10

27:                                               ; preds = %11
  %28 = getelementptr inbounds [32 x i32], ptr %5, i64 0, i64 0
  %29 = getelementptr inbounds [32 x i32], ptr %3, i64 0, i64 0
  %30 = getelementptr inbounds [32 x i32], ptr %4, i64 0, i64 0
  %31 = getelementptr inbounds [3 x ptr], ptr %6, i32 0, i32 0
  store ptr %5, ptr %31, align 8
  %32 = getelementptr inbounds [3 x ptr], ptr %7, i32 0, i32 0
  store ptr %28, ptr %32, align 8
  %33 = getelementptr inbounds [3 x ptr], ptr %8, i64 0, i64 0
  store ptr null, ptr %33, align 8
  %34 = getelementptr inbounds [3 x ptr], ptr %6, i32 0, i32 1
  store ptr %3, ptr %34, align 8
  %35 = getelementptr inbounds [3 x ptr], ptr %7, i32 0, i32 1
  store ptr %29, ptr %35, align 8
  %36 = getelementptr inbounds [3 x ptr], ptr %8, i64 0, i64 1
  store ptr null, ptr %36, align 8
  %37 = getelementptr inbounds [3 x ptr], ptr %6, i32 0, i32 2
  store ptr %4, ptr %37, align 8
  %38 = getelementptr inbounds [3 x ptr], ptr %7, i32 0, i32 2
  store ptr %30, ptr %38, align 8
  %39 = getelementptr inbounds [3 x ptr], ptr %8, i64 0, i64 2
  store ptr null, ptr %39, align 8
  %40 = getelementptr inbounds [3 x ptr], ptr %6, i32 0, i32 0
  %41 = getelementptr inbounds [3 x ptr], ptr %7, i32 0, i32 0
  %42 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 0
  store i32 2, ptr %42, align 4
  %43 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 1
  store i32 3, ptr %43, align 4
  %44 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 2
  store ptr %40, ptr %44, align 8
  %45 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 3
  store ptr %41, ptr %45, align 8
  %46 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 4
  store ptr @.offload_sizes, ptr %46, align 8
  %47 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 5
  store ptr @.offload_maptypes, ptr %47, align 8
  %48 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 6
  store ptr null, ptr %48, align 8
  %49 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 7
  store ptr null, ptr %49, align 8
  %50 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 8
  store i64 32, ptr %50, align 8
  %51 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 9
  store i64 0, ptr %51, align 8
  %52 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 10
  store [3 x i32] zeroinitializer, ptr %52, align 4
  %53 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 11
  store [3 x i32] zeroinitializer, ptr %53, align 4
  %54 = getelementptr inbounds %struct.__tgt_kernel_arguments, ptr %10, i32 0, i32 12
  store i32 0, ptr %54, align 4
  %55 = call i32 @__tgt_target_kernel(ptr @3, i64 -1, i32 0, i32 0, ptr @.__omp_offloading_10305_4683c_main_l21.region_id, ptr %10)
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %27
  call void @__omp_offloading_10305_4683c_main_l21(ptr %5, ptr %3, ptr %4) #2
  br label %58

58:                                               ; preds = %57, %27
  store i32 0, ptr %2, align 4
  br label %59

59:                                               ; preds = %68, %58
  %60 = load i32, ptr %2, align 4
  %61 = icmp slt i32 %60, 32
  br i1 %61, label %62, label %71

62:                                               ; preds = %59
  %63 = load i32, ptr %2, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [32 x i32], ptr %5, i64 0, i64 %64
  %66 = load i32, ptr %65, align 4
  %67 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %66)
  br label %68

68:                                               ; preds = %62
  %69 = load i32, ptr %2, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, ptr %2, align 4
  br label %59, !llvm.loop !12

71:                                               ; preds = %59
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind optnone uwtable
define internal void @__omp_offloading_10305_4683c_main_l21(ptr noundef nonnull align 4 dereferenceable(128) %0, ptr noundef nonnull align 4 dereferenceable(128) %1, ptr noundef nonnull align 4 dereferenceable(128) %2) #1 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  store ptr %0, ptr %4, align 8
  store ptr %1, ptr %5, align 8
  store ptr %2, ptr %6, align 8
  %7 = load ptr, ptr %4, align 8
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %6, align 8
  call void (ptr, i32, ptr, ...) @__kmpc_fork_teams(ptr @3, i32 3, ptr @__omp_offloading_10305_4683c_main_l21.omp_outlined, ptr %7, ptr %8, ptr %9)
  ret void
}

; Function Attrs: noinline norecurse nounwind optnone uwtable
define internal void @__omp_offloading_10305_4683c_main_l21.omp_outlined(ptr noalias noundef %0, ptr noalias noundef %1, ptr noundef nonnull align 4 dereferenceable(128) %2, ptr noundef nonnull align 4 dereferenceable(128) %3, ptr noundef nonnull align 4 dereferenceable(128) %4) #1 {
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store ptr %0, ptr %6, align 8
  store ptr %1, ptr %7, align 8
  store ptr %2, ptr %8, align 8
  store ptr %3, ptr %9, align 8
  store ptr %4, ptr %10, align 8
  %18 = load ptr, ptr %8, align 8
  %19 = load ptr, ptr %9, align 8
  %20 = load ptr, ptr %10, align 8
  store i32 0, ptr %13, align 4
  store i32 31, ptr %14, align 4
  store i32 1, ptr %15, align 4
  store i32 0, ptr %16, align 4
  %21 = load ptr, ptr %6, align 8
  %22 = load i32, ptr %21, align 4
  call void @__kmpc_for_static_init_4(ptr @1, i32 %22, i32 92, ptr %16, ptr %13, ptr %14, ptr %15, i32 1, i32 1)
  %23 = load i32, ptr %14, align 4
  %24 = icmp sgt i32 %23, 31
  br i1 %24, label %25, label %26

25:                                               ; preds = %5
  br label %28

26:                                               ; preds = %5
  %27 = load i32, ptr %14, align 4
  br label %28

28:                                               ; preds = %26, %25
  %29 = phi i32 [ 31, %25 ], [ %27, %26 ]
  store i32 %29, ptr %14, align 4
  %30 = load i32, ptr %13, align 4
  store i32 %30, ptr %11, align 4
  br label %31

31:                                               ; preds = %40, %28
  %32 = load i32, ptr %11, align 4
  %33 = load i32, ptr %14, align 4
  %34 = icmp sle i32 %32, %33
  br i1 %34, label %35, label %44

35:                                               ; preds = %31
  %36 = load i32, ptr %13, align 4
  %37 = zext i32 %36 to i64
  %38 = load i32, ptr %14, align 4
  %39 = zext i32 %38 to i64
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @3, i32 5, ptr @__omp_offloading_10305_4683c_main_l21.omp_outlined.omp_outlined, i64 %37, i64 %39, ptr %18, ptr %19, ptr %20)
  br label %40

40:                                               ; preds = %35
  %41 = load i32, ptr %11, align 4
  %42 = load i32, ptr %15, align 4
  %43 = add nsw i32 %41, %42
  store i32 %43, ptr %11, align 4
  br label %31

44:                                               ; preds = %31
  br label %45

45:                                               ; preds = %44
  call void @__kmpc_for_static_fini(ptr @1, i32 %22)
  ret void
}

; Function Attrs: nounwind
declare void @__kmpc_for_static_init_4(ptr, i32, i32, ptr, ptr, ptr, ptr, i32, i32) #2

; Function Attrs: noinline norecurse nounwind optnone uwtable
define internal void @__omp_offloading_10305_4683c_main_l21.omp_outlined.omp_outlined(ptr noalias noundef %0, ptr noalias noundef %1, i64 noundef %2, i64 noundef %3, ptr noundef nonnull align 4 dereferenceable(128) %4, ptr noundef nonnull align 4 dereferenceable(128) %5, ptr noundef nonnull align 4 dereferenceable(128) %6) #1 {
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store ptr %0, ptr %8, align 8
  store ptr %1, ptr %9, align 8
  store i64 %2, ptr %10, align 8
  store i64 %3, ptr %11, align 8
  store ptr %4, ptr %12, align 8
  store ptr %5, ptr %13, align 8
  store ptr %6, ptr %14, align 8
  %22 = load ptr, ptr %12, align 8
  %23 = load ptr, ptr %13, align 8
  %24 = load ptr, ptr %14, align 8
  store i32 0, ptr %17, align 4
  store i32 31, ptr %18, align 4
  %25 = load i64, ptr %10, align 8
  %26 = trunc i64 %25 to i32
  %27 = load i64, ptr %11, align 8
  %28 = trunc i64 %27 to i32
  store i32 %26, ptr %17, align 4
  store i32 %28, ptr %18, align 4
  store i32 1, ptr %19, align 4
  store i32 0, ptr %20, align 4
  %29 = load ptr, ptr %8, align 8
  %30 = load i32, ptr %29, align 4
  call void @__kmpc_for_static_init_4(ptr @2, i32 %30, i32 34, ptr %20, ptr %17, ptr %18, ptr %19, i32 1, i32 1)
  %31 = load i32, ptr %18, align 4
  %32 = icmp sgt i32 %31, 31
  br i1 %32, label %33, label %34

33:                                               ; preds = %7
  br label %36

34:                                               ; preds = %7
  %35 = load i32, ptr %18, align 4
  br label %36

36:                                               ; preds = %34, %33
  %37 = phi i32 [ 31, %33 ], [ %35, %34 ]
  store i32 %37, ptr %18, align 4
  %38 = load i32, ptr %17, align 4
  store i32 %38, ptr %15, align 4
  br label %39

39:                                               ; preds = %60, %36
  %40 = load i32, ptr %15, align 4
  %41 = load i32, ptr %18, align 4
  %42 = icmp sle i32 %40, %41
  br i1 %42, label %43, label %63

43:                                               ; preds = %39
  %44 = load i32, ptr %15, align 4
  %45 = mul nsw i32 %44, 1
  %46 = add nsw i32 0, %45
  store i32 %46, ptr %21, align 4
  %47 = load i32, ptr %21, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [32 x i32], ptr %23, i64 0, i64 %48
  %50 = load i32, ptr %49, align 4
  %51 = load i32, ptr %21, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [32 x i32], ptr %24, i64 0, i64 %52
  %54 = load i32, ptr %53, align 4
  %55 = add nsw i32 %50, %54
  %56 = load i32, ptr %21, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [32 x i32], ptr %22, i64 0, i64 %57
  store i32 %55, ptr %58, align 4
  br label %59

59:                                               ; preds = %43
  br label %60

60:                                               ; preds = %59
  %61 = load i32, ptr %15, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, ptr %15, align 4
  br label %39

63:                                               ; preds = %39
  br label %64

64:                                               ; preds = %63
  call void @__kmpc_for_static_fini(ptr @1, i32 %30)
  ret void
}

; Function Attrs: nounwind
declare void @__kmpc_for_static_fini(ptr, i32) #2

; Function Attrs: nounwind
declare !callback !13 void @__kmpc_fork_call(ptr, i32, ptr, ...) #2

; Function Attrs: nounwind
declare !callback !13 void @__kmpc_fork_teams(ptr, i32, ptr, ...) #2

; Function Attrs: nounwind
declare i32 @__tgt_target_kernel(ptr, i64, i32, i32, ptr, ptr) #2

declare i32 @printf(ptr noundef, ...) #3

; Function Attrs: noinline uwtable
define internal void @.omp_offloading.requires_reg() #4 section ".text.startup" {
  call void @__tgt_register_requires(i64 1)
  ret void
}

; Function Attrs: nounwind
declare void @__tgt_register_requires(i64) #2

attributes #0 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { noinline norecurse nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noinline uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!omp_offload.info = !{!1}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
!llvm.ident = !{!8}
!llvm.embedded.objects = !{!9}

!0 = !{}
!1 = !{i32 0, i32 66309, i32 288828, !"main", i32 21, i32 0, i32 0}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 7, !"openmp", i32 51}
!4 = !{i32 8, !"PIC Level", i32 2}
!5 = !{i32 7, !"PIE Level", i32 2}
!6 = !{i32 7, !"uwtable", i32 2}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"clang version 18.1.7 (git@github.com:mooxiu/llvm.git 3fcb21a600ba8b0b603c93b90db978640c052323)"}
!9 = !{ptr @llvm.embedded.object, !".llvm.offloading"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = !{i64 2, i64 -1, i64 -1, i1 true}
